name: Build and Release

on:
  push:
    tags:
      - 'v*.*.*'

permissions: 
  contents: write
  discussions: write

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Bun
        uses: oven-sh/setup-bun@v1
        with:
          bun-version: latest

      - name: Install dependencies
        run: bun install

      - name: Generate Prisma client
        run: bunx prisma generate

      - name: Build application
        run: bun run build

      - name: Create .env.example if not exists
        run: |
          if [ ! -f .env.example ]; then
            cp .env.example.template .env.example || echo "# Environment Variables
            # Database
            DATABASE_URL=postgresql://postgres:postgres@localhost:5432/kratos
            # Auth
            AUTH_SECRET=your-auth-secret
            # Stripe
            STRIPE_SECRET_KEY=your-stripe-secret-key
            STRIPE_WEBHOOK_SECRET=your-stripe-webhook-secret
            # Pterodactyl
            PTERODACTYL_URL=https://panel.example.com
            PTERODACTYL_API_KEY=your-pterodactyl-api-key
            PTERODACTYL_CLIENT_API_KEY=your-pterodactyl-client-api-key
            # Discord Webhook (optional)
            DISCORD_WEBHOOK_URL=your-discord-webhook-url" > .env.example
          fi

      - name: Create deployment package
        run: |
          mkdir -p release
          cp -r .output release/
          cp -r .nuxt release/
          cp -r prisma release/
          cp package.json release/
          cp bun.lockb release/ || true
          cp .env.example release/
          cp LICENSE release/ || true
          cp README.md release/
          cp CONTRIBUTING.md release/ || true
          cp -r docker release/ || mkdir -p release/docker
          
          # Create deploy scripts
          cat > release/deploy.sh << 'EOF'
          #!/bin/bash
          echo "Installing dependencies..."
          bun install --production
          echo "Running database migrations..."
          bunx prisma migrate deploy
          echo "Starting Kratos Panel..."
          bun start
          EOF
          
          chmod +x release/deploy.sh
          
          # Create docker-compose.yml
          cat > release/docker-compose.yml << 'EOF'
          version: '3'
          services:
            kratos:
              build: .
              ports:
                - "3000:3000"
              env_file:
                - .env
              depends_on:
                - postgres
            postgres:
              image: postgres:14
              environment:
                POSTGRES_PASSWORD: postgres
                POSTGRES_USER: postgres
                POSTGRES_DB: kratos
              volumes:
                - postgres_data:/var/lib/postgresql/data
          volumes:
            postgres_data:
          EOF
          
          # Create improved Dockerfile with build dependencies
          cat > release/Dockerfile << 'EOF'
          FROM oven/bun:latest AS builder

          # Install necessary build dependencies
          RUN apt-get update && apt-get install -y \
              python3 \
              make \
              g++ \
              gcc \
              && ln -s /usr/bin/python3 /usr/bin/python

          WORKDIR /app
          COPY . .

          # Install dependencies for building native modules
          RUN bun install

          # Generate Prisma client
          RUN bunx prisma generate

          # For production-only runtime
          FROM oven/bun:latest

          # Install runtime dependencies only
          RUN apt-get update && apt-get install -y \
              ca-certificates \
              && rm -rf /var/lib/apt/lists/*

          WORKDIR /app
          
          # Copy from builder
          COPY --from=builder /app/.output /app/.output
          COPY --from=builder /app/node_modules /app/node_modules
          COPY --from=builder /app/package.json /app/
          COPY --from=builder /app/prisma /app/prisma

          EXPOSE 3000
          CMD ["bun", "start"]
          EOF
          
          # Create standalone node installation instructions
          cat > release/INSTALL.md << 'EOF'
          # Kratos Panel Installation Guide
          
          ## Prerequisites
          - Bun runtime or Node.js 18 or higher
          - PostgreSQL database
          - Pterodactyl panel with API access
          - Stripe account (for payments)
          
          ## Standard Installation (with Bun)
          
          1. Extract the release package
          2. Copy `.env.example` to `.env` and fill in your configuration details
          3. Install required build dependencies (if using native modules):
             ```
             # For Debian/Ubuntu
             sudo apt-get install -y python3 make g++ gcc
             
             # For CentOS/RHEL
             sudo yum install -y python3 make gcc-c++ gcc
             ```
          4. Run the deployment script:
             ```
             ./deploy.sh
             ```
          
          ## Docker Installation (Recommended)
          
          1. Extract the release package
          2. Copy `.env.example` to `.env` and fill in your configuration details
          3. Start the containers:
             ```
             docker-compose up -d
             ```
          
          ## Manual Installation
          
          1. Extract the release package
          2. Copy `.env.example` to `.env` and fill in your configuration details
          3. Install dependencies:
             ```
             bun install --production
             ```
          4. Run database migrations:
             ```
             bunx prisma migrate deploy
             ```
          5. Start the application:
             ```
             bun start
             ```
          
          ## Post-Installation
          
          1. Access your panel at http://your-server:3000
          2. Set up an admin account
          3. Configure Pterodactyl connection
          4. Set up Stripe webhook endpoints
          
          For more detailed instructions, refer to the project documentation.
          EOF
          
          # Package everything
          cd release
          zip -r ../kratos-panel-${GITHUB_REF#refs/tags/}.zip .
          cd ..

      - name: Build Docker image
        run: |
          cd release
          docker build -t kratoshost/kratos-panel:${GITHUB_REF#refs/tags/} .
          docker save kratoshost/kratos-panel:${GITHUB_REF#refs/tags/} | gzip > ../kratos-panel-docker-${GITHUB_REF#refs/tags/}.tar.gz

      - name: Create GitHub Release
        id: create_release
        uses: softprops/action-gh-release@v2
        with:
          name: Kratos Panel ${{ github.ref_name }}
          draft: false
          prerelease: ${{ contains(github.ref, 'alpha') || contains(github.ref, 'beta') || contains(github.ref, 'rc') }}
          generate_release_notes: true
          files: |
            kratos-panel-${{ github.ref_name }}.zip
            kratos-panel-docker-${{ github.ref_name }}.tar.gz
          body: |
            # Kratos Panel ${{ github.ref_name }}
            
            ## Installation
            
            ### Option 1: Standard Installation with Bun
            
            1. Download and extract `kratos-panel-${{ github.ref_name }}.zip`
            2. Configure your `.env` file
            3. Install required build dependencies:
               ```bash
               # For Debian/Ubuntu
               sudo apt-get install -y python3 make g++ gcc
               ```
            4. Run `./deploy.sh`
            
            ### Option 2: Docker Installation (Recommended)
            
            1. Download and extract `kratos-panel-${{ github.ref_name }}.zip`
            2. Configure your `.env` file
            3. Run `docker-compose up -d`
            
            ### Option 3: Docker Image
            
            1. Download `kratos-panel-docker-${{ github.ref_name }}.tar.gz`
            2. Load the image: `docker load < kratos-panel-docker-${{ github.ref_name }}.tar.gz`
            3. Run the container: `docker run -p 3000:3000 --env-file .env kratoshost/kratos-panel:${{ github.ref_name }}`
            
            For detailed installation instructions, refer to the INSTALL.md file included in the release package.
            
            ## Changes in this Release
            
            <!-- Release notes are automatically generated -->