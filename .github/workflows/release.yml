name: Build and Release

on:
  push:
    tags:
      - 'v*.*.*'

permissions: 
  contents: write
  discussions: write
  packages: write
  deployments: write

jobs:
  build-and-release:
    runs-on: ubuntu-latest
    environment: Production
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Bun
        uses: oven-sh/setup-bun@v1
        with:
          bun-version: latest

      - name: Install dependencies
        run: bun install

      - name: Generate Prisma client
        run: bunx prisma generate

      - name: Build application
        run: bun run build

      - name: Create .env.example if not exists
        run: |
          if [ ! -f .env.example ]; then
            cp .env.example.template .env.example || echo "# Environment Variables
            # Database
            DATABASE_URL=postgresql://postgres:postgres@localhost:5432/kratos
            # Auth
            AUTH_SECRET=your-auth-secret
            BETTER_AUTH_SECRET=your-better-auth-secret
            BETTER_AUTH_URL=https://your-site-url.com
            # Stripe
            STRIPE_SECRET_KEY=your-stripe-secret-key
            STRIPE_WEBHOOK_SECRET=your-stripe-webhook-secret
            # Pterodactyl
            PTERODACTYL_URL=https://panel.example.com
            NUXT_PUBLIC_PTERODACTYL_URL=https://panel.example.com
            PTERODACTYL_API_KEY=your-pterodactyl-api-key
            NUXT_PTERODACTYL_API_KEY=your-pterodactyl-api-key
            PTERODACTYL_CLIENT_API_KEY=your-pterodactyl-client-api-key
            NUXT_PUBLIC_PTERODACTYL_CLIENT_API_KEY=your-pterodactyl-client-api-key
            # Discord Webhook (optional)
            DISCORD_WEBHOOK_URL=your-discord-webhook-url
            # GitHub Auth (optional)
            GH_ID=your-github-oauth-app-id
            GH_SECRET=your-github-oauth-app-secret" > .env.example
          fi
      
      # Set up Docker Buildx for multi-platform builds
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      # Login to GitHub Container Registry
      - name: Login to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.repository_owner }}
          password: ${{ secrets.GITHUB_TOKEN }}

      # Extract metadata for Docker image
      - name: Extract metadata for Docker
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ghcr.io/${{ github.repository }}
          tags: |
            type=semver,pattern={{version}}
            type=semver,pattern={{major}}.{{minor}}
            type=raw,value=latest,enable=${{ !contains(github.ref, 'alpha') && !contains(github.ref, 'beta') && !contains(github.ref, 'rc') }}

      - name: Create deployment package
        run: |
          mkdir -p release
          cp -r .output release/
          cp -r .nuxt release/
          cp -r prisma release/
          cp package.json release/
          cp bun.lockb release/ || true
          cp .env.example release/
          cp LICENSE release/ || true
          cp README.md release/
          cp CONTRIBUTING.md release/ || true
          cp -r docker release/ || mkdir -p release/docker
          
          # Create deploy scripts
          cat > release/deploy.sh << 'EOF'
          #!/bin/bash
          echo "Installing dependencies..."
          bun install --production
          echo "Running database migrations..."
          bunx prisma migrate deploy
          echo "Starting Kratos Panel..."
          bun start
          EOF
          
          chmod +x release/deploy.sh
          
          # Create docker-compose.yml without Postgres
          cat > release/docker-compose.yml << 'EOF'
          version: '3'
          services:
            kratos:
              build: .
              ports:
                - "3000:3000"
              env_file:
                - .env
              restart: unless-stopped
              # For additional environment variables
              environment:
                NODE_ENV: production
              # For optional healthcheck
              healthcheck:
                test: ["CMD", "wget", "--spider", "-q", "http://localhost:3000/api/health"]
                interval: 30s
                timeout: 10s
                retries: 3
                start_period: 40s
              
          # Note: This configuration assumes you have an external PostgreSQL database
          # Make sure to set the proper DATABASE_URL in your .env file
          EOF
          
          # Create improved Dockerfile with build dependencies
          cat > release/Dockerfile << 'EOF'
          FROM oven/bun:latest AS builder

          # Install necessary build dependencies
          RUN apt-get update && apt-get install -y \
              python3 \
              make \
              g++ \
              gcc \
              && ln -s /usr/bin/python3 /usr/bin/python \
              && rm -rf /var/lib/apt/lists/*

          WORKDIR /app
          COPY . .

          # Install dependencies for building native modules
          RUN bun install

          # Generate Prisma client
          RUN bunx prisma generate

          # For production-only runtime
          FROM oven/bun:latest

          # Install runtime dependencies only
          RUN apt-get update && apt-get install -y \
              ca-certificates \
              && rm -rf /var/lib/apt/lists/*

          WORKDIR /app
          
          # Copy from builder
          COPY --from=builder /app/.output /app/.output
          COPY --from=builder /app/node_modules /app/node_modules
          COPY --from=builder /app/package.json /app/
          COPY --from=builder /app/prisma /app/prisma

          EXPOSE 3000
          
          # Use environment variables to configure application
          ENV NODE_ENV=production

          CMD ["bun", "start"]
          EOF
          
          # Package everything
          cd release
          zip -r ../kratos-panel-${GITHUB_REF#refs/tags/}.zip .
          cd ..

      # Build and push Docker image to GHCR
      - name: Build and push Docker image to GHCR
        uses: docker/build-push-action@v6
        with:
          context: ./release
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          file: ./release/Dockerfile
      
      # Also build the image for release package
      - name: Build Docker image for release
        run: |
          cd release
          docker build -t kratoshost/kratos-panel:${GITHUB_REF#refs/tags/} .
          docker save kratoshost/kratos-panel:${GITHUB_REF#refs/tags/} | gzip > ../kratos-panel-docker-${GITHUB_REF#refs/tags/}.tar.gz

      # Create GitHub deployment
      - name: Create GitHub deployment
        id: deployment
        uses: chrnorm/deployment-action@v2
        with:
          token: ${{ github.token }}
          environment: production
          ref: ${{ github.ref }}

      - name: Create GitHub Release
        id: create_release
        uses: softprops/action-gh-release@v2
        with:
          name: Kratos Panel ${{ github.ref_name }}
          draft: false
          prerelease: ${{ contains(github.ref, 'alpha') || contains(github.ref, 'beta') || contains(github.ref, 'rc') }}
          generate_release_notes: true
          files: |
            kratos-panel-${{ github.ref_name }}.zip
            kratos-panel-docker-${{ github.ref_name }}.tar.gz
          body: |
            # Kratos Panel ${{ github.ref_name }}
            
            ## Installation Options
            
            ### Option 1: Standard Installation with Bun
            
            1. Download and extract `kratos-panel-${{ github.ref_name }}.zip`
            2. Configure your `.env` file
            3. Install required build dependencies:
               ```bash
               # For Debian/Ubuntu
               sudo apt-get install -y python3 make g++ gcc
               ```
            4. Run `./deploy.sh`
            
            ### Option 2: Docker Installation (Recommended)
            
            1. Download and extract `kratos-panel-${{ github.ref_name }}.zip`
            2. Configure your `.env` file
            3. Run `docker-compose up -d`
            
            ### Option 3: Docker Image from GitHub Container Registry
            
            ```bash
            docker pull ghcr.io/${{ github.repository_owner }}/kratos-panel:${{ github.ref_name }}
            docker run -p 3000:3000 --env-file .env ghcr.io/${{ github.repository_owner }}/kratos-panel:${{ github.ref_name }}
            ```
            
            ### Option 4: Use Release Docker Image
            
            1. Download `kratos-panel-docker-${{ github.ref_name }}.tar.gz`
            2. Load the image: `docker load < kratos-panel-docker-${{ github.ref_name }}.tar.gz`
            3. Run the container: `docker run -p 3000:3000 --env-file .env kratoshost/kratos-panel:${{ github.ref_name }}`
            
            For detailed installation instructions, refer to the INSTALL.md file included in the release package.
            
            ## Changes in this Release
            
            <!-- Release notes are automatically generated -->

      # Deploy to production server
      - name: Deploy to production server
        if: ${{ !contains(github.ref, 'alpha') && !contains(github.ref, 'beta') && !contains(github.ref, 'rc') }}
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.SERVER_HOST }}
          username: ${{ secrets.SERVER_USERNAME }}
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          script: |
            # Create environment file directory if it doesn't exist
            mkdir -p /home/${{ secrets.SERVER_USERNAME }}/kratos-prod
            
            # Create or update environment file with production secrets
            cat > /home/${{ secrets.SERVER_USERNAME }}/kratos-prod/.env << 'EOF'
            # Production Environment Variables
            FRONTEND_URL=${{ secrets.URL }}
            DATABASE_URL=${{ secrets.DATABASE_URL }}
            BETTER_AUTH_SECRET=${{ secrets.AUTH_SECRET }}
            BETTER_AUTH_URL=${{ secrets.URL }}
            STRIPE_SECRET_KEY=${{ secrets.STRIPE_SECRET_KEY }}
            STRIPE_WEBHOOK_SECRET=${{ secrets.STRIPE_WEBHOOK_SECRET }}
            NUXT_PUBLIC_PTERODACTYL_URL=${{ secrets.PTERODACTYL_URL }}
            NUXT_PTERODACTYL_API_KEY=${{ secrets.PTERODACTYL_API_KEY }}
            NUXT_PUBLIC_PTERODACTYL_CLIENT_API_KEY=${{ secrets.PTERODACTYL_CLIENT_API_KEY }}
            GH_ID=${{ secrets.GH_ID }}
            GH_SECRET=${{ secrets.GH_SECRET }}
            NODE_ENV=production
            EOF

            # Convert repository name to lowercase for Docker
            REPO_LOWERCASE=$(echo "${{ github.repository }}" | tr '[:upper:]' '[:lower:]')
            
            # Login to GitHub Container Registry with improved error handling
            echo "Logging into GitHub Container Registry..."
            echo "${{ secrets.GITHUB_TOKEN }}" | docker login ghcr.io -u ${{ github.repository_owner }} --password-stdin
            
            # Echo the image being pulled for debugging
            IMAGE_NAME="ghcr.io/${REPO_LOWERCASE}:${{ github.ref_name }}"
            echo "Attempting to pull image: ${IMAGE_NAME}"
            
            # Pull the latest image with error handling
            if ! docker pull ${IMAGE_NAME}; then
              echo "Failed to pull image. Checking if image exists in registry..."
              # List images in registry to help debug
              echo "Available images in registry:"
              echo "Repository: ${REPO_LOWERCASE}"
              # Continue deployment using local image if available
              echo "Attempting to use already built image if available"
            fi
            
            # Stop and remove any existing container
            echo "Stopping existing container if running..."
            docker stop kratos-prod || echo "No container named kratos-prod running"
            docker rm kratos-prod || echo "No container named kratos-prod to remove"
            
            # Start a new container with the production environment
            echo "Starting new container..."
            docker run -d --name kratos-prod \
              -p 1443:3000 \
              --restart unless-stopped \
              --env-file /home/${{ secrets.SERVER_USERNAME }}/kratos-prod/.env \
              ${IMAGE_NAME} || echo "Failed to start container. Check image availability and permissions."

      # Update deployment status
      - name: Update deployment status
        uses: chrnorm/deployment-status@v2
        with:
          token: ${{ github.token }}
          state: success
          deployment-id: ${{ steps.deployment.outputs.deployment_id }}