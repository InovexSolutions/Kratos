name: Deploy to Preproduction

on:
  push:
    branches:
      - develop
  workflow_dispatch:

permissions:
  contents: read
  packages: write
  deployments: write

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest
    environment: Dev
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Bun
        uses: oven-sh/setup-bun@v2
        with:
          bun-version: latest

      - name: Install dependencies
        run: bun install
  
      - name: Generate Prisma client
        run: bunx prisma generate

      - name: Build application
        run: bun run build

      # Create preproduction environment file
      - name: Create .env.preprod
        run: |
          cat > .env.preprod << EOF
          # Preproduction Environment Variables
          # NODE_ENV=production
          # APP_ENV=preproduction
          # Add other environment variables as needed
          # Database
          DATABASE_URL=postgresql://postgres:postgres@localhost:5432/kratos
          # Auth
          AUTH_SECRET=your-auth-secret
          # Stripe
          NUXT_PUBLIC_STRIPE_PUBLISHABLE_KEY=your-stripe-publishable-key
          STRIPE_SECRET_KEY=your-stripe-secret-key
          STRIPE_WEBHOOK_SECRET=your-stripe-webhook-secret
          # Pterodactyl
          PTERODACTYL_URL=https://panel.example.com
          PTERODACTYL_API_KEY=your-pterodactyl-api-key
          PTERODACTYL_CLIENT_API_KEY=your-pterodactyl-client-api-key
          # Discord Webhook (optional)
          DISCORD_WEBHOOK_URL=your-discord-webhook-url
          EOF

      # Set up Docker Buildx for multi-platform builds
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      # Login to GitHub Container Registry
      - name: Login to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.repository_owner }}
          password: ${{ secrets.GITHUB_TOKEN }}

      # Extract metadata for Docker image
      - name: Extract metadata for Docker
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ghcr.io/${{ github.repository }}
          tags: |
            type=raw,value=develop
            type=sha,format=short
            type=raw,value=preproduction

      # Create improved Dockerfile for preproduction (similar to release.yml)
      - name: Create Preproduction Dockerfile
        run: |
          mkdir -p .github/docker
          cat > .github/docker/Dockerfile.preprod << 'EOF'
          FROM oven/bun:latest

          # Install runtime dependencies only
          RUN apt-get update && apt-get install -y \
              ca-certificates \
              && rm -rf /var/lib/apt/lists/*

          WORKDIR /app
          
          # Copy pre-built application files (built in the GitHub Action)
          COPY .output /app/.output
          COPY node_modules /app/node_modules
          COPY package.json /app/
          COPY prisma /app/prisma
          COPY .env.preprod /app/.env

          EXPOSE 3000
          
          # Use environment variables to configure application
          ENV NODE_ENV=production
          ENV APP_ENV=preproduction

          # Use Bun for runtime
          CMD ["bun", "start"]
          EOF

      # Build and push Docker image
      - name: Build and push Docker image
        uses: docker/build-push-action@v6
        with:
          context: .
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          file: .github/docker/Dockerfile.preprod

      # Create GitHub deployment
      - name: Create GitHub deployment
        id: deployment
        uses: chrnorm/deployment-action@v2
        with:
          token: ${{ github.token }}
          environment: preproduction
          ref: ${{ github.ref }}

      # Deploy to server via SSH
      - name: Deploy to server via SSH
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.SERVER_HOST }}
          username: ${{ secrets.SERVER_USERNAME }}
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          script: |
            # Create environment file directory if it doesn't exist
            mkdir -p /home/${{ secrets.SERVER_USERNAME }}/kratos-preprod
            
            # Create or update environment file (consider using secrets)
            cat > /home/${{ secrets.SERVER_USERNAME }}/kratos-preprod/.env << 'EOF'
            # Preproduction Environment Variables
            FRONTEND_URL=${{ secrets.PREPROD_URL }}
            DATABASE_URL=${{ secrets.DATABASE_URL }}
            BETTER_AUTH_SECRET=${{ secrets.AUTH_SECRET }}
            BETTER_AUTH_URL=${{ secrets.PREPROD_URL }}
            NUXT_PUBLIC_STRIPE_PUBLISHABLE_KEY=${{ secrets.STRIPE_PUBLISHABLE_KEY }}
            STRIPE_SECRET_KEY=${{ secrets.STRIPE_SECRET_KEY }}
            STRIPE_WEBHOOK_SECRET=${{ secrets.STRIPE_WEBHOOK_SECRET }}
            NUXT_PUBLIC_PTERODACTYL_URL=${{ secrets.PTERODACTYL_URL }}
            NUXT_PTERODACTYL_API_KEY=${{ secrets.PTERODACTYL_API_KEY }}
            NUXT_PTERODACTYL_CLIENT_API_KEY=${{ secrets.PTERODACTYL_CLIENT_API_KEY }}
            # DISCORD_WEBHOOK_URL=${{ secrets.DISCORD_WEBHOOK_URL }}
            GH_ID=${{ secrets.GH_ID }}
            GH_SECRET=${{ secrets.GH_SECRET }}
            EOF

            # Convert repository name to lowercase for Docker
            REPO_LOWERCASE=$(echo "${{ github.repository }}" | tr '[:upper:]' '[:lower:]')
            
            # Login to GitHub Container Registry
            echo "${{ secrets.GITHUB_TOKEN }}" | docker login ghcr.io -u ${{ github.repository_owner }} --password-stdin

            # Pull the latest image
            docker pull ghcr.io/${REPO_LOWERCASE}:develop
            
            # Stop and remove any existing container
            docker stop kratos-preprod || true
            docker rm kratos-preprod || true
            
            # Start a new container
            docker run -d --name kratos-preprod \
              -p 3001:3000 \
              --restart unless-stopped \
              --env-file /home/${{ secrets.SERVER_USERNAME }}/kratos-preprod/.env \
              ghcr.io/${REPO_LOWERCASE}:develop

      # Update deployment status
      - name: Update deployment status
        uses: chrnorm/deployment-status@v2
        with:
          token: ${{ github.token }}
          state: success
          deployment-id: ${{ steps.deployment.outputs.deployment_id }}
          environment-url: ${{ secrets.PREPROD_URL }}