name: Deploy to Preproduction

on:
  push:
    branches:
      - develop
  workflow_dispatch:

permissions:
  contents: read
  packages: write
  deployments: write

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest
    environment: Dev
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Bun
        uses: oven-sh/setup-bun@v1
        with:
          bun-version: latest

      - name: Install dependencies
        run: bun install

      - name: Generate Prisma client
        run: bunx prisma generate

      - name: Build application
        run: bun run build

      # Create preproduction environment file
      - name: Create .env.preprod
        run: |
          cat > .env.preprod << EOF
          # Preproduction Environment Variables
          # NODE_ENV=production
          # APP_ENV=preproduction
          # Add other environment variables as needed
          # Database
          DATABASE_URL=postgresql://postgres:postgres@localhost:5432/kratos
          # Auth
          AUTH_SECRET=your-auth-secret
          # Stripe
          STRIPE_SECRET_KEY=your-stripe-secret-key
          STRIPE_WEBHOOK_SECRET=your-stripe-webhook-secret
          # Pterodactyl
          PTERODACTYL_URL=https://panel.example.com
          PTERODACTYL_API_KEY=your-pterodactyl-api-key
          PTERODACTYL_CLIENT_API_KEY=your-pterodactyl-client-api-key
          # Discord Webhook (optional)
          DISCORD_WEBHOOK_URL=your-discord-webhook-url"
          EOF

      # Set up Docker Buildx for multi-platform builds
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      # Login to GitHub Container Registry
      - name: Login to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.repository_owner }}
          password: ${{ secrets.GITHUB_TOKEN }}

      # Extract metadata for Docker image
      - name: Extract metadata for Docker
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ghcr.io/${{ github.repository }}
          tags: |
            type=raw,value=develop
            type=sha,format=short
            type=raw,value=preproduction

      # Create Dockerfile for preproduction
      - name: Create Preproduction Dockerfile
        run: |
          mkdir -p .github/docker
          cat > .github/docker/Dockerfile.preprod << 'EOF'
          FROM oven/bun:latest AS builder

          # Install necessary build dependencies
          RUN apt-get update && apt-get install -y \
              python3 \
              make \
              g++ \
              gcc \
              && ln -s /usr/bin/python3 /usr/bin/python

          WORKDIR /app
          COPY . .

          # Install dependencies and build
          RUN bun install
          RUN bunx prisma generate
          RUN bun run build

          # For production-only runtime
          FROM oven/bun:latest

          # Install runtime dependencies only
          RUN apt-get update && apt-get install -y \
              ca-certificates \
              && rm -rf /var/lib/apt/lists/*

          WORKDIR /app

          RUN pwd
          RUN ls -la /app
          RUN ls -la 

          # Copy from builder
          COPY --from=builder /app/.output /app/.output
          COPY --from=builder /app/node_modules /app/node_modules
          COPY --from=builder /app/package.json /app/
          COPY --from=builder /app/prisma /app/prisma
          COPY --from=builder /app/.env.preprod /app/.env

          RUN ls -la /app/.output

          EXPOSE 3000
          
          # Use environment variables to configure application
          ENV NODE_ENV=production
          ENV APP_ENV=preproduction

          CMD ["bun", "start"]
          EOF

      # Build and push Docker image
      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          file: .github/docker/Dockerfile.preprod

      # Create GitHub deployment
      - name: Create GitHub deployment
        id: deployment
        uses: chrnorm/deployment-action@v2
        with:
          token: ${{ github.token }}
          environment: preproduction
          ref: ${{ github.ref }}

      # Alternative approach: Deploy to server via SSH
      - name: Deploy to server via SSH
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.SERVER_HOST }}
          username: ${{ secrets.SERVER_USERNAME }}
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          script: |
            # Pull the latest image
            docker pull ghcr.io/${{ github.repository }}:develop
            
            # Stop and remove any existing container
            docker stop kratos-preprod || true
            docker rm kratos-preprod || true
            
            # Start a new container
            docker run -d --name kratos-preprod \
              -p 3001:3000 \
              --restart unless-stopped \
              --env-file /path/to/preprod.env \
              ghcr.io/${{ github.repository }}:develop

      # Update deployment status
      - name: Update deployment status
        uses: chrnorm/deployment-status@v2
        with:
          token: ${{ github.token }}
          state: success
          deployment-id: ${{ steps.deployment.outputs.deployment_id }}
          environment-url: ${{ secrets.PREPROD_URL }}

      # Send notification on successful deployment
      # - name: Notify of successful deployment
      #   if: success()
      #   uses: rtCamp/action-slack-notify@v2
      #   env:
      #     SLACK_WEBHOOK: ${{ secrets.SLACK_WEBHOOK }}
      #     SLACK_CHANNEL: deployments
      #     SLACK_COLOR: good
      #     SLACK_TITLE: New preproduction deployment
      #     SLACK_MESSAGE: |
      #       Deployed version ${{ github.sha }} to preproduction
      #       Access it at ${{ secrets.PREPROD_URL }}