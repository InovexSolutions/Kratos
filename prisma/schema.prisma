generator client {
  provider      = "prisma-client-js"
  binaryTargets = ["native", "debian-openssl-3.0.x"]
}

datasource db {
  provider          = "postgresql"
  url               = env("DATABASE_URL")
  shadowDatabaseUrl = env("SHADOW_DATABASE_URL")
}

model User {
  id               String    @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  // Auth fields
  name             String?
  email            String    @unique
  emailVerified    DateTime? @map("email_verified")
  image            String?
  passwordHash     String?   @map("password_hash") @db.VarChar(255)
  // Profile fields
  firstName        String?   @map("first_name") @db.VarChar(100)
  lastName         String?   @map("last_name") @db.VarChar(100)
  phoneNumber      String?   @map("phone_number") @db.VarChar(20)
  companyName      String?   @map("company_name") @db.VarChar(255)
  streetAddress    String?   @map("street_address") @db.VarChar(255)
  streetAddress2   String?   @map("street_address_2") @db.VarChar(255)
  city             String?   @db.VarChar(100)
  state            String?   @db.VarChar(50)
  zipCode          String?   @map("zip_code") @db.VarChar(20)
  country          String?   @db.VarChar(50)
  taxId            String?   @map("tax_id") @db.VarChar(50)
  // Integration IDs
  stripeCustomerId String?   @map("stripe_customer_id") @db.VarChar(255)
  isAdmin          Boolean   @default(false) @map("is_admin")
  // Timestamps
  createdAt        DateTime  @default(now()) @map("created_at") @db.Timestamp(6)
  updatedAt        DateTime  @default(now()) @map("updated_at") @db.Timestamp(6)

  // Relations
  accounts       Account[]
  sessions       Session[]
  authenticators Authenticator[]
  servers        Server[]
  orders         Order[]
  invoices       Invoice[]
  subscriptions  Subscription[]

  @@map("users")
}

model Account {
  userId            String   @db.Uuid
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?  @db.Text
  access_token      String?  @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?  @db.Text
  session_state     String?
  createdAt         DateTime @default(now()) @map("created_at") @db.Timestamp(6)
  updatedAt         DateTime @default(now()) @map("updated_at") @db.Timestamp(6)

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([provider, providerAccountId])
  @@map("accounts")
}

model Session {
  sessionToken String   @unique @db.Text
  userId       String   @db.Uuid
  expires      DateTime @db.Timestamp(6)
  createdAt    DateTime @default(now()) @map("created_at") @db.Timestamp(6)
  updatedAt    DateTime @default(now()) @map("updated_at") @db.Timestamp(6)

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}

model VerificationToken {
  identifier String
  token      String   @db.Text
  expires    DateTime @db.Timestamp(6)

  @@id([identifier, token])
  @@map("verification_tokens")
}

model Authenticator {
  credentialID         String   @unique @db.Text
  userId               String   @db.Uuid
  providerAccountId    String
  credentialPublicKey  String   @db.Text
  counter              Int
  credentialDeviceType String
  credentialBackedUp   Boolean
  transports           String?
  createdAt            DateTime @default(now()) @map("created_at") @db.Timestamp(6)
  updatedAt            DateTime @default(now()) @map("updated_at") @db.Timestamp(6)

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([userId, credentialID])
  @@map("authenticators")
}

model Invoice {
  id                    String        @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  amount                Decimal       @db.Decimal(10, 2)
  status                InvoiceStatus @default(PENDING)
  dueDate               DateTime?     @map("due_date") @db.Timestamp(6)
  paidAt                DateTime?     @map("paid_at") @db.Timestamp(6)
  paymentMethod         String?       @map("payment_method") @db.VarChar(50)
  stripePaymentIntentId String?       @unique @map("stripe_payment_intent_id")
  metadata              Json?
  createdAt             DateTime      @default(now()) @map("created_at") @db.Timestamp(6)
  updatedAt             DateTime      @default(now()) @map("updated_at") @db.Timestamp(6)

  // Relations
  orderId  String  @map("order_id") @db.Uuid
  order    Order   @relation(fields: [orderId], references: [id])
  userId   String  @map("user_id") @db.Uuid
  user     User    @relation(fields: [userId], references: [id])
  serverId String? @map("server_id") @db.Uuid
  server   Server? @relation("ServerInvoices", fields: [serverId], references: [id])
  productId   String? @map("product_id") @db.Uuid
  product     Product?   @relation("ProductInvoices", fields: [productId], references: [id])

  @@index([orderId])
  @@index([userId])
  @@map("invoices")
}

model Subscription {
  id                   String    @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  stripeSubscriptionId String    @unique @map("stripe_subscription_id") @db.VarChar(255)
  status               SubStatus @default(active)
  currentPeriodEnd     DateTime  @map("current_period_end") @db.Timestamp(6)
  createdAt            DateTime  @default(now()) @map("created_at") @db.Timestamp(6)
  updatedAt            DateTime  @default(now()) @map("updated_at") @db.Timestamp(6)

  // Relations
  orderId String @map("order_id") @db.Uuid
  order   Order  @relation(fields: [orderId], references: [id])
  userId  String @map("user_id") @db.Uuid
  user    User   @relation(fields: [userId], references: [id])

  @@unique([orderId]) // Add unique constraint
  @@index([userId])
  @@index([orderId])
  @@map("subscriptions")
}

model Server {
  id                  String    @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  userId              String    @map("user_id") @db.Uuid
  name                String    @db.VarChar(255)
  config              Json
  pterodactylServerId String?   @map("pterodactyl_server_id") @db.VarChar(255)
  status              String?   @default("pending") @db.VarChar(20)
  createdAt           DateTime? @default(now()) @map("created_at") @db.Timestamp(6)
  updatedAt           DateTime? @default(now()) @map("updated_at") @db.Timestamp(6)

  user     User      @relation(fields: [userId], references: [id])
  invoices Invoice[] @relation("ServerInvoices") // Named relation
  orders   Order[]

  @@index([userId])
  @@map("servers")
}

model Product {
  id        String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  name      String
  slug      String   @unique
  config    Json?
  basePrice Decimal  @db.Decimal(10, 2)
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  pricingTiers PricingTier[]
  modifiers    PriceModifier[]
  invoices     Invoice[]       @relation("ProductInvoices") // Named relation
  orders       Order[]
	@@map("Product")
}

model PricingTier {
  id        String   @id @default(dbgenerated("gen_random_uuid()"))
  productId    String   @map("product_id") @db.Uuid
  type      String
  label     String
  value     String
  price     Decimal  @db.Decimal(10, 2)
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  product Product @relation(fields: [productId], references: [id])
}

model PriceModifier {
  id          String   @id @default(dbgenerated("gen_random_uuid()"))
  productId      String   @map("product_id") @db.Uuid
  type        String
  condition   Json?
  value       Decimal  @db.Decimal(10, 2)
  description String
  createdAt   DateTime @default(now()) @map("created_at")
  updatedAt   DateTime @updatedAt @map("updated_at")

  product Product @relation(fields: [productId], references: [id])
}

model Order {
  id           String       @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  poNumber     String       @map("po_number") @db.VarChar(255)
  status       OrderStatus  @default(ACTIVE)
  billingCycle BillingCycle @default(MONTHLY) @map("billing_cycle")
  startDate    DateTime     @default(now()) @map("start_date") @db.Timestamp(6)
  endDate      DateTime?    @map("end_date") @db.Timestamp(6)
  createdAt    DateTime     @default(now()) @map("created_at") @db.Timestamp(6)
  updatedAt    DateTime     @default(now()) @map("updated_at") @db.Timestamp(6)

  // Relations
  userId       String        @map("user_id") @db.Uuid
  user         User          @relation(fields: [userId], references: [id])
  serverId     String?       @map("server_id") @db.Uuid
  server       Server?       @relation(fields: [serverId], references: [id])
  productId       String?       @map("product_id") @db.Uuid
  product         Product?         @relation(fields: [productId], references: [id])
  invoices     Invoice[]
  subscription Subscription?

  @@index([userId])
  @@index([serverId])
  @@index([status])
  @@map("orders")
}

// Enums remain the same
enum InvoiceStatus {
  PENDING
  CREATED
  PAID
  PARTIAL
  FAILED
  REFUNDED
  VOID
}

enum SubStatus {
  active
  past_due
  unpaid
  canceled
  incomplete
  incomplete_expired
  trialing
}

enum OrderStatus {
  ACTIVE
  COMPLETED
  CANCELED
  PAUSED
}

enum BillingCycle {
  MONTHLY
  QUARTERLY
  SEMIANNUAL
  ANNUAL
}
