generator client {
  provider = "prisma-client-js"
  binaryTargets = ["native", "debian-openssl-3.0.x"]
}

datasource db {
  provider          = "postgresql"
  url               = env("DATABASE_URL")
  shadowDatabaseUrl = env("SHADOW_DATABASE_URL")
}

model User {
  id            String          @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  name          String?
  email         String          @unique
  emailVerified DateTime?       @map("email_verified")
  image         String?
  accounts      Account[]
  sessions      Session[]
  authenticators Authenticator[]
  passwordHash  String?         @map("password_hash") @db.VarChar(255)
  firstName     String?          @map("first_name") @db.VarChar(100)
  lastName      String?          @map("last_name") @db.VarChar(100)
  phoneNumber   String?         @map("phone_number") @db.VarChar(20)
  companyName   String?         @map("company_name") @db.VarChar(255)
  streetAddress String?          @map("street_address") @db.VarChar(255)
  streetAddress2 String?        @map("street_address_2") @db.VarChar(255)
  city          String?          @db.VarChar(100)
  state         String?          @db.VarChar(50)
  zipCode       String?          @map("zip_code") @db.VarChar(20)
  country       String?          @db.VarChar(50)
  taxId         String?         @map("tax_id") @db.VarChar(50)
  invoiceNinjaClientId String?  @map("invoice_ninja_client_id") @db.VarChar(255)
  pterodactylUserId String?     @map("pterodactyl_user_id") @db.VarChar(255)
  stripeCustomerId String?      @map("stripe_customer_id") @db.VarChar(255)
  isAdmin       Boolean         @map("is_admin") @default(false)
  createdAt     DateTime        @default(now()) @map("created_at") @db.Timestamp(6)
  updatedAt     DateTime        @default(now()) @map("updated_at") @db.Timestamp(6)

  invoices      Invoice[]
  servers       Server[]
  orders        Order[]
  subscriptions Subscription[]

  @@map("users")
}

model Account {
  userId            String     @db.Uuid
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?    @db.Text
  access_token      String?    @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?    @db.Text
  session_state     String?
  createdAt         DateTime   @default(now()) @map("created_at") @db.Timestamp(6)
  updatedAt         DateTime   @default(now()) @map("updated_at") @db.Timestamp(6)

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([provider, providerAccountId])
  @@map("accounts")
}

model Session {
  sessionToken String   @unique @db.Text
  userId       String   @db.Uuid
  expires      DateTime @db.Timestamp(6)
  createdAt    DateTime @default(now()) @map("created_at") @db.Timestamp(6)
  updatedAt    DateTime @default(now()) @map("updated_at") @db.Timestamp(6)

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}

model VerificationToken {
  identifier String
  token      String   @db.Text
  expires    DateTime @db.Timestamp(6)

  @@id([identifier, token])
  @@map("verification_tokens")
}

model Authenticator {
  credentialID         String   @unique @db.Text
  userId               String   @db.Uuid
  providerAccountId    String
  credentialPublicKey  String   @db.Text
  counter              Int
  credentialDeviceType String
  credentialBackedUp   Boolean
  transports           String?
  createdAt            DateTime @default(now()) @map("created_at") @db.Timestamp(6)
  updatedAt            DateTime @default(now()) @map("updated_at") @db.Timestamp(6)

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([userId, credentialID])
  @@map("authenticators")
}

model Invoice {
  id               String           @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  orderId          String           @map("order_id") @db.Uuid
  userId           String           @map("user_id") @db.Uuid
  serverId         String?          @map("server_id") @db.Uuid
  invoiceNinjaId   String?          @map("invoice_ninja_id") @db.VarChar(255)
  stripeId         String?          @unique @map("stripe_id") @db.VarChar(255)
  amount           Decimal          @db.Decimal(10, 2)
  status           InvoiceStatus    @default(pending)
  metadata         Json?
  createdAt        DateTime?        @default(now()) @map("created_at") @db.Timestamp(6)
  updatedAt        DateTime?        @default(now()) @map("updated_at") @db.Timestamp(6)
  dueDate          DateTime?        @map("due_date") @db.Timestamp(6)
  subscriptionId   String?          @map("subscription_id") @db.Uuid
  gameId           String?          @map("game_id") @db.Uuid

  user        User         @relation(fields: [userId], references: [id])
  server      Server?      @relation(fields: [serverId], references: [id])
  game        Game?        @relation(fields: [gameId], references: [id])
  order       Order        @relation(fields: [orderId], references: [id])
  subscription Subscription? @relation(fields: [subscriptionId], references: [id])

  @@unique([invoiceNinjaId])
  @@index([status])
  @@index([userId])
  @@index([orderId])
  @@map("invoices")
}

model Subscription {
  id                  String        @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  userId              String        @map("user_id") @db.Uuid
  stripeSubscription  String        @unique @map("stripe_subscription") @db.VarChar(255)
  status              SubStatus     @default(active)
  currentPeriodEnd    DateTime      @map("current_period_end") @db.Timestamp(6)
  createdAt           DateTime?     @default(now()) @map("created_at") @db.Timestamp(6)
  updatedAt           DateTime?     @default(now()) @map("updated_at") @db.Timestamp(6)

  user    User     @relation(fields: [userId], references: [id])
  invoices Invoice[]

  @@index([userId])
  @@index([status])
  @@map("subscriptions")
}

model Server {
  id                  String     @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  userId              String     @map("user_id") @db.Uuid
  gameType            String     @map("game_type") @db.VarChar(50)
  config              Json
  pterodactylServerId String?    @map("pterodactyl_server_id") @db.VarChar(255)
  status              String?    @default("pending") @db.VarChar(20)
  createdAt           DateTime?  @default(now()) @map("created_at") @db.Timestamp(6)
  updatedAt           DateTime?  @default(now()) @map("updated_at") @db.Timestamp(6)

  user    User      @relation(fields: [userId], references: [id])
  invoices Invoice[]
  orders  Order[]

  @@index([userId])
  @@map("servers")
}

model Game {
  id           String          @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  name         String
  slug         String          @unique
  basePrice    Decimal         @db.Decimal(10, 2)
  createdAt    DateTime        @default(now()) @map("created_at")
  updatedAt    DateTime        @updatedAt @map("updated_at")

  pricingTiers PricingTier[]
  modifiers    PriceModifier[]
  invoices     Invoice[]
  orders       Order[]
}

model PricingTier {
  id        String   @id @default(dbgenerated("gen_random_uuid()"))
  gameId    String   @map("game_id") @db.Uuid
  type      String
  label     String
  value     String
  price     Decimal  @db.Decimal(10, 2)
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  game Game @relation(fields: [gameId], references: [id])
}

model PriceModifier {
  id          String   @id @default(dbgenerated("gen_random_uuid()"))
  gameId      String   @map("game_id") @db.Uuid
  type        String
  condition   Json?
  value       Decimal  @db.Decimal(10, 2)
  description String
  createdAt   DateTime @default(now()) @map("created_at")
  updatedAt   DateTime @updatedAt @map("updated_at")

  game Game @relation(fields: [gameId], references: [id])
}

model Order {
  id            String       @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  userId        String       @map("user_id") @db.Uuid
  poNumber      String      @map("po_number") @db.VarChar(255)
  serverId      String?      @map("server_id") @db.Uuid
  gameId        String?      @map("game_id") @db.Uuid
  status        OrderStatus  @default(ACTIVE)
  startDate     DateTime     @default(now()) @map("start_date")
  endDate       DateTime?    @map("end_date") @db.Timestamp(6)
  billingCycle  BillingCycle @default(MONTHLY) @map("billing_cycle")
  createdAt     DateTime     @default(now()) @map("created_at") @db.Timestamp(6)
  updatedAt     DateTime     @default(now()) @map("updated_at") @db.Timestamp(6)
  recurringId   String?       @map("recurring_id") @db.VarChar(255)

  user    User?    @relation(fields: [userId], references: [id])
  server  Server?  @relation(fields: [serverId], references: [id])
  game    Game?    @relation(fields: [gameId], references: [id])
  invoices Invoice[]

  @@index([userId])
  @@index([serverId])
  @@index([status])
  @@map("orders")
}

// Enums remain the same
enum InvoiceStatus {
  pending
  created
  paid
  failed
  void
}

enum SubStatus {
  active
  past_due
  unpaid
  canceled
  incomplete
  incomplete_expired
  trialing
}

enum OrderStatus {
  ACTIVE
  COMPLETED
  CANCELED
  PAUSED
}

enum BillingCycle {
  MONTHLY
  QUARTERLY
  SEMIANNUAL
  ANNUAL
}
