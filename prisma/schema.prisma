generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
  shadowDatabaseUrl = env("SHADOW_DATABASE_URL")
}

model invoices {
  id               String    @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  user_id          String    @db.Uuid
  server_id        String?   @db.Uuid
  invoice_ninja_id String    @db.VarChar(255)
  amount           Decimal   @db.Decimal(10, 2)
  status           String?   @default("pending") @db.VarChar(20)
  metadata         Json?
  created_at       DateTime? @default(now()) @db.Timestamp(6)
  updated_at       DateTime? @default(now()) @db.Timestamp(6)
  servers          servers?  @relation(fields: [server_id], references: [id], onUpdate: NoAction)
  users            users     @relation(fields: [user_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
  game_id     String?  @db.Uuid
  game        Game?    @relation(fields: [game_id], references: [id])
  @@unique([invoice_ninja_id])
  @@index([status], map: "idx_invoices_status")
  @@index([user_id], map: "idx_invoices_user_id")
}

model servers {
  id                    String     @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  user_id               String     @db.Uuid
  game_type             String     @db.VarChar(50)
  config                Json
  pterodactyl_server_id String     @db.VarChar(255)
  status                String?    @default("pending") @db.VarChar(20)
  created_at            DateTime?  @default(now()) @db.Timestamp(6)
  updated_at            DateTime?  @default(now()) @db.Timestamp(6)
  invoices              invoices[]
  users                 users      @relation(fields: [user_id], references: [id], onDelete: Cascade, onUpdate: NoAction)

  @@index([user_id], map: "idx_servers_user_id")
}

model users {
  id                      String     @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  email                   String     @unique @db.VarChar(255)
  password_hash           String     @db.VarChar(255)
  invoice_ninja_client_id String?    @db.VarChar(255)
  pterodactyl_user_id     String?    @db.VarChar(255)
  created_at              DateTime?  @default(now()) @db.Timestamp(6)
  updated_at              DateTime?  @default(now()) @db.Timestamp(6)
  name                    String     @db.VarChar(255)
  invoices                invoices[]
  servers                 servers[]

  @@index([email], map: "idx_users_email")
}

model Game {
  id          String         @id @default(uuid())
  name        String
  slug        String         @unique
  basePrice   Decimal        @db.Decimal(10, 2)
  pricingTiers PricingTier[]
  modifiers   PriceModifier[]
  createdAt   DateTime       @default(now())
  updatedAt   DateTime       @updatedAt
}

model PricingTier {
  id          String   @id @default(uuid())
  game        Game     @relation(fields: [gameId], references: [id])
  gameId      String
  type        String   // 'ram', 'cpu', 'storage', 'server_type'
  label       String
  value       String   // e.g. '8' (for GB), 'spigot' (for server type)
  price       Decimal  @db.Decimal(10, 2)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model PriceModifier {
  id          String   @id @default(uuid())
  game        Game     @relation(fields: [gameId], references: [id])
  gameId      String
  type        String   // 'multiplier', 'fixed', 'conditional'
  condition   Json?    // { field: 'server_type', value: 'spigot' }
  value       Decimal  @db.Decimal(10, 2)
  description String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}